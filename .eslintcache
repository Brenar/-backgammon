[{"D:\\JavaScript\\react-redux-project\\backgammon\\src\\index.js":"1","D:\\JavaScript\\react-redux-project\\backgammon\\src\\App.js":"2","D:\\JavaScript\\react-redux-project\\backgammon\\src\\history.js":"3","D:\\JavaScript\\react-redux-project\\backgammon\\src\\redux\\store.js":"4","D:\\JavaScript\\react-redux-project\\backgammon\\src\\redux\\reducer.js":"5","D:\\JavaScript\\react-redux-project\\backgammon\\src\\models\\backgammon.js":"6","D:\\JavaScript\\react-redux-project\\backgammon\\src\\utils.js":"7","D:\\JavaScript\\react-redux-project\\backgammon\\src\\components\\desk\\index.js":"8"},{"size":492,"mtime":1612615414312,"results":"9","hashOfConfig":"10"},{"size":280,"mtime":1612964569831,"results":"11","hashOfConfig":"10"},{"size":109,"mtime":1612615414271,"results":"12","hashOfConfig":"10"},{"size":385,"mtime":1612615414445,"results":"13","hashOfConfig":"10"},{"size":446,"mtime":1612615414419,"results":"14","hashOfConfig":"10"},{"size":4259,"mtime":1613063624793,"results":"15","hashOfConfig":"10"},{"size":147,"mtime":1612964570188,"results":"16","hashOfConfig":"10"},{"size":2276,"mtime":1613133063692,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1chnrr7",{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\JavaScript\\react-redux-project\\backgammon\\src\\index.js",[],["37","38"],"D:\\JavaScript\\react-redux-project\\backgammon\\src\\App.js",["39"],"import './App.scss'\nimport { connect } from 'react-redux'\nimport Desk from './components/desk'\nimport { Route, Switch } from 'react-router-dom'\n\nexport default function App() {\n  return (\n    <Switch>\n      <Route path=\"/game\">\n        <Desk />\n      </Route>\n    </Switch>\n  )\n}\n","D:\\JavaScript\\react-redux-project\\backgammon\\src\\history.js",[],"D:\\JavaScript\\react-redux-project\\backgammon\\src\\redux\\store.js",[],"D:\\JavaScript\\react-redux-project\\backgammon\\src\\redux\\reducer.js",[],"D:\\JavaScript\\react-redux-project\\backgammon\\src\\models\\backgammon.js",["40","41","42","43","44","45","46","47"],"import { createSelector } from 'reselect'\nimport { getRandomDices } from '../utils'\n\n/**\n * Constants\n * */\n\nexport const moduleName = 'gameModel'\n\nexport const GAME_START = `${moduleName}/GAME_START`\nexport const ROLL_THE_DICES = `${moduleName}/ROLL_THE_DICES`\n\nexport const MOVE_CHECKER_REQUEST = `${moduleName}/MOVE_CHECKER_REQUEST`\nexport const MOVE_CHECKER_SUCCESS = `${moduleName}/MOVE_CHECKER_SUCCESS`\nexport const CHANGE_TURN_REQUEST = `${moduleName}/CHANGE_TURN_REQUEST`\nexport const CHANGE_TURN_SUCCESS = `${moduleName}/CHANGE_TURN_SUCCESS`\nexport const GAME_OVER_SUCCESS = `${moduleName}/GAME_OVER_SUCCESS`\n\n/**\n * Reducer\n * */\n\nexport const ReducerRecord = {\n  deskForBlack: [\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n  ],\n  deskForWhite: [\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n  ],\n  points: [2, 3],\n  turn: 'black', // or white\n}\n\nexport default function reducer(state = ReducerRecord, action) {\n  const { type, payload } = action\n\n  switch (type) {\n    case GAME_START:\n      return Object.assign({}, ReducerRecord)\n    case ROLL_THE_DICES:\n      return Object.assign(\n        {},\n        {\n          points: payload,\n        }\n      )\n    case MOVE_CHECKER_SUCCESS:\n      const deskData =\n        state.turn === 'black'\n          ? { deskForBlack: payload }\n          : { deskForWhite: payload }\n      return Object.assign({}, deskData)\n    case CHANGE_TURN_SUCCESS:\n      const currentTurn = state.turn === 'black' ? 'white' : 'black'\n      return Object.assign(\n        {},\n        {\n          turn: currentTurn,\n        }\n      )\n    case GAME_OVER_SUCCESS:\n      return Object.assign({}, ReducerRecord)\n    default:\n      return state\n  }\n}\n\n/**\n * Selectors\n * */\n\n//TODO: create selectors\n\nexport const stateSelector = (state) => state[moduleName]\nexport const whiteDeskSelector = createSelector(\n  stateSelector,\n  (state) => {\n    const result = []\n    const whiteDesk = state.deskForWhite\n    const blackDesk = state.deskForBlack\n\n    whiteDesk.map((whiteLine, whiteKey) => {\n      let blackTemp = []\n      blackDesk.map((blackLine, blackKey) => {       \n        if (whiteKey === blackKey) {\n          blackTemp = blackLine\n        }\n      })\n      result.push(whiteLine.concat(blackTemp))\n    })\n    return result\n  } \n)\nexport const blackDeskSelector = createSelector(\n  stateSelector,\n  (state) => {\n    const result = []\n    const whiteDesk = state.deskForWhite\n    const blackDesk = state.deskForBlack\n\n    blackDesk.map((blackLine, blackKey) => {\n      let whiteTemp = []\n      whiteDesk.map((whiteLine, whiteKey) => {       \n        if (blackKey === whiteKey) {\n          whiteTemp = whiteLine\n        }\n      })\n      result.push(blackLine.concat(whiteTemp))\n    })\n    return result\n  } \n)\nexport const blackScoreSelector = createSelector(stateSelector, (state) => {\n  let count = 0\n  state.deskForBlack.map((line) => {\n    line.map((point) => {\n      count = count + point\n    })\n  })\n  return count\n})\n\nexport const whiteScoreSelector = createSelector(stateSelector, (state) => {\n  let count = 0\n  state.deskForWhite.map((line) => {\n    line.map((point) => {\n      count = count + point\n    })\n  })\n  return count\n})\n\nexport const turnSelector = createSelector(stateSelector, (state) => state.turn)\nexport const pointsSelector = createSelector(\n  stateSelector,\n  (state) => state.points\n)\n\n/**\n * Action Creators\n * */\n\nexport const initStartGame = () => (dispatch, getState) => ({\n  type: GAME_START,\n})\n\nexport const handleRollTheDices = () => ({\n  type: ROLL_THE_DICES,\n  payload: getRandomDices(),\n})\n\n// export const handleMoveChecker = (desk) => ({\n//   type: MOVE_CHECKER_REQUEST,\n//   payload: desk,\n// })\n\nexport const handleMoveChecker = (desk) => (dispatch, getState) => {\n\n  dispatch({\n    type: MOVE_CHECKER_REQUEST,\n    payload: desk\n  })\n}\n\nexport const handleChangeTurn = () => ({\n  type: CHANGE_TURN_REQUEST,\n})\n","D:\\JavaScript\\react-redux-project\\backgammon\\src\\utils.js",[],"D:\\JavaScript\\react-redux-project\\backgammon\\src\\components\\desk\\index.js",["48","49","50","51"],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":2,"column":10,"nodeType":"58","messageId":"59","endLine":2,"endColumn":17},{"ruleId":"60","severity":1,"message":"61","line":128,"column":41,"nodeType":"62","messageId":"63","endLine":128,"endColumn":43},{"ruleId":"60","severity":1,"message":"61","line":130,"column":43,"nodeType":"62","messageId":"63","endLine":130,"endColumn":45},{"ruleId":"60","severity":1,"message":"61","line":147,"column":41,"nodeType":"62","messageId":"63","endLine":147,"endColumn":43},{"ruleId":"60","severity":1,"message":"61","line":149,"column":43,"nodeType":"62","messageId":"63","endLine":149,"endColumn":45},{"ruleId":"60","severity":1,"message":"61","line":161,"column":33,"nodeType":"62","messageId":"63","endLine":161,"endColumn":35},{"ruleId":"60","severity":1,"message":"61","line":162,"column":22,"nodeType":"62","messageId":"63","endLine":162,"endColumn":24},{"ruleId":"60","severity":1,"message":"61","line":171,"column":33,"nodeType":"62","messageId":"63","endLine":171,"endColumn":35},{"ruleId":"60","severity":1,"message":"61","line":172,"column":22,"nodeType":"62","messageId":"63","endLine":172,"endColumn":24},{"ruleId":"56","severity":1,"message":"64","line":32,"column":33,"nodeType":"58","messageId":"59","endLine":32,"endColumn":43},{"ruleId":"56","severity":1,"message":"65","line":32,"column":45,"nodeType":"58","messageId":"59","endLine":32,"endColumn":55},{"ruleId":"56","severity":1,"message":"66","line":32,"column":57,"nodeType":"58","messageId":"59","endLine":32,"endColumn":63},{"ruleId":"56","severity":1,"message":"67","line":32,"column":65,"nodeType":"58","messageId":"59","endLine":32,"endColumn":69},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"no-unused-vars","'connect' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'blackScore' is assigned a value but never used.","'whiteScore' is assigned a value but never used.","'points' is assigned a value but never used.","'turn' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]