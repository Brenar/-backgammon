[{"D:\\JavaScript\\react-redux-project\\backgammon\\src\\index.js":"1","D:\\JavaScript\\react-redux-project\\backgammon\\src\\history.js":"2","D:\\JavaScript\\react-redux-project\\backgammon\\src\\App.js":"3","D:\\JavaScript\\react-redux-project\\backgammon\\src\\redux\\store.js":"4","D:\\JavaScript\\react-redux-project\\backgammon\\src\\redux\\reducer.js":"5","D:\\JavaScript\\react-redux-project\\backgammon\\src\\components\\desk\\index.js":"6","D:\\JavaScript\\react-redux-project\\backgammon\\src\\models\\backgammon.js":"7","D:\\JavaScript\\react-redux-project\\backgammon\\src\\utils.js":"8","D:\\JavaScript\\react-redux-project\\backgammon\\src\\components\\desk-aside\\index.js":"9","D:\\JavaScript\\react-redux-project\\backgammon\\src\\components\\desk-line\\index.js":"10"},{"size":492,"mtime":1612615414312,"results":"11","hashOfConfig":"12"},{"size":109,"mtime":1612615414271,"results":"13","hashOfConfig":"12"},{"size":255,"mtime":1613147869405,"results":"14","hashOfConfig":"12"},{"size":385,"mtime":1612615414445,"results":"15","hashOfConfig":"12"},{"size":446,"mtime":1612615414419,"results":"16","hashOfConfig":"12"},{"size":1769,"mtime":1613662391800,"results":"17","hashOfConfig":"12"},{"size":4382,"mtime":1613702834105,"results":"18","hashOfConfig":"12"},{"size":262,"mtime":1613406429718,"results":"19","hashOfConfig":"12"},{"size":3340,"mtime":1613702831186,"results":"20","hashOfConfig":"12"},{"size":2256,"mtime":1613702833279,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1chnrr7",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},"D:\\JavaScript\\react-redux-project\\backgammon\\src\\index.js",[],["47","48"],"D:\\JavaScript\\react-redux-project\\backgammon\\src\\history.js",[],"D:\\JavaScript\\react-redux-project\\backgammon\\src\\App.js",[],"D:\\JavaScript\\react-redux-project\\backgammon\\src\\redux\\store.js",[],"D:\\JavaScript\\react-redux-project\\backgammon\\src\\redux\\reducer.js",[],"D:\\JavaScript\\react-redux-project\\backgammon\\src\\components\\desk\\index.js",["49","50"],"import {connect} from 'react-redux'\r\nimport React from 'react'\r\nimport './style.scss'\r\nimport DeskAside from '../desk-aside'\r\n\r\nimport {\r\n  whiteDeskSelector,\r\n  blackDeskSelector,\r\n  blackScoreSelector,\r\n  whiteScoreSelector,\r\n  pointsSelector,\r\n  turnSelector,\r\n  initStartGame,\r\n  onChangeTurn,\r\n  onRollTheDices,\r\n} from '../../models/backgammon'\r\n\r\nconst deskSeparator = (desk) => {\r\n  const firstDesk = [],\r\n    secondDesk = []\r\n  for (let i = 0; i < desk.length; i++) {\r\n    if (i < 12) {\r\n      firstDesk.push(desk[i])\r\n    } else {\r\n      secondDesk.push(desk[i])\r\n    }\r\n  }\r\n  return [firstDesk, secondDesk]\r\n}\r\n\r\n\r\nexport function Desk(props) {\r\n  const {whiteDesk, blackDesk, blackScore, whiteScore, points, turn} = props\r\n  return (\r\n    <div className=\"Desk\">\r\n      {deskSeparator(whiteDesk).map((aside, asideKey) => {\r\n        return (\r\n          <DeskAside\r\n            asideData={aside}\r\n            asideKey={asideKey}\r\n            key={asideKey}\r\n            turn={turn}\r\n            points={points}\r\n            desk={blackDesk}\r\n          />\r\n        )\r\n      })}\r\n      {deskSeparator(blackDesk).map((aside, asideKey) => {\r\n        return (\r\n          <DeskAside\r\n            asideData={aside}\r\n            asideKey={asideKey}\r\n            key={asideKey}\r\n            turn={turn}\r\n            points={points}\r\n            desk={whiteDesk}\r\n          />\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default connect(\r\n  (state) => ({\r\n    whiteDesk: whiteDeskSelector(state),\r\n    blackDesk: blackDeskSelector(state),\r\n    blackScore: blackScoreSelector(state),\r\n    whiteScore: whiteScoreSelector(state),\r\n    points: pointsSelector(state),\r\n    turn: turnSelector(state),\r\n  }),\r\n  {initStartGame, onChangeTurn, onRollTheDices}\r\n)(Desk)\r\n","D:\\JavaScript\\react-redux-project\\backgammon\\src\\models\\backgammon.js",["51","52","53","54","55","56","57","58"],"import { createSelector } from 'reselect'\r\nimport { getRandomDices } from '../utils'\r\n\r\n/**\r\n * Constants\r\n * */\r\n\r\nexport const moduleName = 'gameModel'\r\n\r\nexport const GAME_START = `${moduleName}/GAME_START`\r\nexport const ROLL_THE_DICES = `${moduleName}/ROLL_THE_DICES`\r\n\r\nexport const MOVE_CHECKER_REQUEST = `${moduleName}/MOVE_CHECKER_REQUEST`\r\nexport const MOVE_CHECKER_SUCCESS = `${moduleName}/MOVE_CHECKER_SUCCESS`\r\nexport const CHANGE_TURN_REQUEST = `${moduleName}/CHANGE_TURN_REQUEST`\r\nexport const CHANGE_TURN_SUCCESS = `${moduleName}/CHANGE_TURN_SUCCESS`\r\nexport const GAME_OVER_SUCCESS = `${moduleName}/GAME_OVER_SUCCESS`\r\n\r\n/**\r\n * Reducer\r\n * */\r\n\r\nexport const ReducerRecord = {\r\n  deskForBlack: [\r\n    [],\r\n    [],\r\n    [],\r\n    [],\r\n    [],\r\n    [],\r\n    [],\r\n    [],\r\n    [],\r\n    [],\r\n    [],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [],\r\n    [],\r\n    [],\r\n    [],\r\n    [],\r\n    [],\r\n    [],\r\n    [],\r\n    [],\r\n    [],\r\n    [],\r\n    [],\r\n  ],\r\n  deskForWhite: [\r\n    [],\r\n    [],\r\n    [],\r\n    [],\r\n    [],\r\n    [],\r\n    [],\r\n    [],\r\n    [],\r\n    [],\r\n    [],\r\n    [],\r\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n    [],\r\n    [1],\r\n    [1],\r\n    [],\r\n    [],\r\n    [],\r\n    [],\r\n    [],\r\n    [],\r\n    [],\r\n    [],\r\n  ],\r\n  points: [3, 2],\r\n  turn: 'white', // or white\r\n}\r\n\r\nexport default function reducer(state = ReducerRecord, action) {\r\n  const { type, payload } = action\r\n\r\n  switch (type) {\r\n    case GAME_START:\r\n      return Object.assign({}, ReducerRecord)\r\n    case ROLL_THE_DICES:\r\n      return Object.assign(\r\n        {},\r\n        state,\r\n        {\r\n          points: payload,\r\n        }\r\n      )\r\n    case MOVE_CHECKER_REQUEST:\r\n      const deskData = state.turn === 'black' ? { deskForBlack: payload } : { deskForWhite: payload }\r\n      console.log(deskData)\r\n      return Object.assign({}, state, deskData)\r\n    case CHANGE_TURN_SUCCESS:\r\n      const currentTurn = state.turn === 'black' ? 'white' : 'black'\r\n      return Object.assign(\r\n        {},\r\n        state,\r\n        {\r\n          turn: currentTurn,\r\n        }\r\n      )\r\n    case GAME_OVER_SUCCESS:\r\n      return Object.assign({}, ReducerRecord)\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n/**\r\n * Selectors\r\n * */\r\n\r\n//TODO: create selectors\r\n\r\nexport const stateSelector = (state) => state[moduleName]\r\nexport const whiteDeskSelector = createSelector(\r\n  stateSelector,\r\n  (state) => {\r\n    const result = []\r\n    const whiteDesk = state.deskForWhite\r\n    const blackDesk = state.deskForBlack\r\n\r\n    whiteDesk.map((whiteLine, whiteKey) => {\r\n      let blackTemp = []\r\n      blackDesk.map((blackLine, blackKey) => {       \r\n        if (whiteKey === blackKey) {\r\n          blackTemp = blackLine\r\n        }\r\n      })\r\n      result.push(whiteLine.concat(blackTemp))\r\n    })\r\n    return result\r\n  } \r\n)\r\nexport const blackDeskSelector = createSelector(\r\n  stateSelector,\r\n  (state) => {\r\n    const result = []\r\n    const whiteDesk = state.deskForWhite\r\n    const blackDesk = state.deskForBlack\r\n\r\n    blackDesk.map((blackLine, blackKey) => {\r\n      let whiteTemp = []\r\n      whiteDesk.map((whiteLine, whiteKey) => {       \r\n        if (blackKey === whiteKey) {\r\n          whiteTemp = whiteLine\r\n        }\r\n      })\r\n      result.push(blackLine.concat(whiteTemp))\r\n    })\r\n    return result\r\n  } \r\n)\r\nexport const blackScoreSelector = createSelector(stateSelector, (state) => {\r\n  let count = 0\r\n  state.deskForBlack.map((line) => {\r\n    line.map((point) => {\r\n      count = count + point\r\n    })\r\n  })\r\n  return count\r\n})\r\n\r\nexport const whiteScoreSelector = createSelector(stateSelector, (state) => {\r\n  let count = 0\r\n  state.deskForWhite.map((line) => {\r\n    line.map((point) => {\r\n      count = count + point\r\n    })\r\n  })\r\n  return count\r\n})\r\n\r\nexport const turnSelector = createSelector(stateSelector, (state) => state.turn)\r\nexport const pointsSelector = createSelector(\r\n  stateSelector,\r\n  (state) => state.points\r\n)\r\n\r\n/**\r\n * Action Creators\r\n * */\r\n\r\nexport const initStartGame = () => (dispatch, getState) => ({\r\n  type: GAME_START,\r\n})\r\n\r\nexport const onRollTheDices = () => ({\r\n  type: ROLL_THE_DICES,\r\n  payload: getRandomDices(),\r\n})\r\n\r\nexport const onMoveChecker = (desk) => (dispatch, getState) => {\r\n  dispatch({\r\n  type: MOVE_CHECKER_REQUEST,\r\n  payload: desk,\r\n  })\r\n}\r\n\r\n\r\nexport const onChangeTurn = () => ({\r\n  type: CHANGE_TURN_REQUEST,\r\n})\r\n","D:\\JavaScript\\react-redux-project\\backgammon\\src\\utils.js",[],"D:\\JavaScript\\react-redux-project\\backgammon\\src\\components\\desk-aside\\index.js",["59","60","61","62"],"import React, {useState} from 'react'\r\nimport './style.scss'\r\nimport DeskLine from '../desk-line'\r\n\r\nconst DeskAside = ({asideData, asideKey, turn, points, desk}) => {\r\n  const [activeChecker, setActiveChecker] = useState(null)\r\n  const [activeLines, setActiveLines] = useState([])\r\n\r\n  return (\r\n    <div className=\"deskAsideWhite\">\r\n      {asideData.map((line, key) => {\r\n\r\n        let handleCheckChecker = () => false\r\n        const activeLineId = ((key + 1) * (asideKey)) + 12\r\n        if (line[0] === 1 && turn === 'white') {\r\n          handleCheckChecker = () => {\r\n            setActiveChecker(activeLineId)\r\n            let lines = []\r\n            if (points.length === 2) {\r\n              if ((points[0] + activeLineId) <= 24) {\r\n                  if(desk[points[0] + activeLineId - 1].length === 0 || desk[points[0] + activeLineId - 1][0] === 1)\r\n                    lines.push(points[0] + activeLineId -1)\r\n                //     lines.push(12 - ((points[0] + activeLineId) - 24))\r\n              } else {\r\n                  \r\n              }\r\n              if (desk[points[1] + activeLineId - 1].length === 0 || desk[points[0] + activeLineId - 1][0] === 1) {\r\n                if(lines.push(points[0] + activeLineId) <= 24) {\r\n                    lines.push(points[1] + activeLineId)\r\n                  } else {\r\n                    lines.push(12 - ((points[1] + activeLineId) - 24))\r\n                  }\r\n              }\r\n              if (desk[points[0] + points[1] + activeLineId - 1].length === 0 && lines.length !== 0 || desk[points[0] + activeLineId - 1][0] === 1) {\r\n                if(points[0] + points[1] + activeLineId <= 24) {\r\n                    lines.push(points[0] + points[1] + activeLineId)\r\n                  } else {\r\n                    lines.push(12 - ((points[0] + points[1] + activeLineId) - 24))\r\n                  }\r\n              }\r\n              setActiveLines(lines)\r\n              console.log(points[0] + points[1] + activeLineId)\r\n            }\r\n          }\r\n        }\r\n        if (line[0] === 0 && turn === 'black') {\r\n          handleCheckChecker = () => {\r\n            setActiveChecker(activeLineId)\r\n            let lines = []\r\n            if (points.length === 2) {\r\n                if (desk[points[0] + activeLineId - 1].length === 0 || desk[points[0] + activeLineId - 1][0] === 0) {\r\n                lines.push(points[0] + activeLineId)\r\n                }\r\n                if (desk[points[1] + activeLineId - 1].length === 0 || desk[points[0] + activeLineId - 1][0] === 0) {\r\n                lines.push(points[1] + activeLineId)\r\n                }\r\n                if (desk[points[0] + points[1] + activeLineId - 1].length === 0 && lines.length !== 0 || desk[points[0] + activeLineId - 1][0] === 0) {\r\n                lines.push(points[0] + points[1] + activeLineId)\r\n                }\r\n                setActiveLines(lines)\r\n                console.log(lines)\r\n            }\r\n          }\r\n        } \r\n\r\n\r\n        return (\r\n          <DeskLine\r\n            handleCheckChecker={handleCheckChecker}\r\n            activeChecker={activeChecker}\r\n            key={key}\r\n            DeskKey={key}\r\n            line={line}\r\n            activeLineId={activeLineId}\r\n            activeLines={activeLines}\r\n          />\r\n        )\r\n      })}\r\n    </div>\r\n    \r\n    \r\n\r\n  )\r\n}\r\n\r\nexport default DeskAside","D:\\JavaScript\\react-redux-project\\backgammon\\src\\components\\desk-line\\index.js",["63"],"import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport './style.scss'\r\nimport classNames from 'classnames'\r\nimport {\r\n  blackDeskSelector,\r\n  onMoveChecker,\r\n  turnSelector,\r\n  whiteDeskSelector,\r\n} from '../../models/backgammon'\r\n\r\nconst DeskLine = ({\r\n  activeLines,\r\n  handleCheckChecker,\r\n  activeChecker,\r\n  activeLineId,\r\n  DeskKey,\r\n  line,\r\n  onMoveChecker,\r\n  turn,\r\n  blackDesk,\r\n  whiteDesk\r\n}) => {\r\n  const isActiveLine = activeLines.includes(activeLineId)\r\n  const separator = DeskKey === 6 ? <div className=\"deskSep\"/> : null\r\n  const lineClasses = classNames({\r\n    'deskLine': true,\r\n    'line-active': isActiveLine\r\n  })\r\n\r\n  const handleMoveChecker = () => {\r\n    const activeDesk = turn === 'black' ? blackDesk : whiteDesk\r\n    activeDesk.map((line, key) => {\r\n      if((key + 1) === activeChecker) {\r\n        line.pop()\r\n      }\r\n      if((key + 1) === activeLineId) {\r\n        line.push(turn === 'black' ? 0 : 1)\r\n      }\r\n    })\r\n    let empty = []\r\n    if(turn === 'black') {\r\n      for(let i = 0; i < activeDesk.length; i++) {\r\n        if(activeDesk[i][0] === 1) {\r\n          activeDesk[i] = empty\r\n        }\r\n      }\r\n    }\r\n    if(turn === 'white') {\r\n      for(let i = 0; i < activeDesk.length; i++) {\r\n        if(activeDesk[i][0] === 0) {\r\n          activeDesk[i] = empty\r\n        }\r\n      }\r\n    }\r\n    console.log(activeDesk)\r\n    onMoveChecker(activeDesk)\r\n  }\r\n\r\n  return (\r\n    <span>\r\n      {separator}\r\n      <div className={lineClasses} onClick={isActiveLine ? handleMoveChecker : handleCheckChecker}>\r\n        {line.map((checker, checkKey) => {\r\n          const checkerClasses = classNames({\r\n            'deskChecker': true,\r\n            'checker-white': checker === 1,\r\n            'checker-black': checker === 0,\r\n            'checker-active': (activeChecker === activeLineId) && (checkKey === line.length - 1)\r\n          })\r\n          return <div\r\n            key={checkKey}\r\n            className={checkerClasses}\r\n          >\r\n            {checker}\r\n          </div>\r\n        })}\r\n      </div>\r\n    </span>\r\n  )\r\n}\r\n\r\nexport default connect((state) => ({\r\n  whiteDesk: whiteDeskSelector(state),\r\n  blackDesk: blackDeskSelector(state),\r\n  turn: turnSelector(state),\r\n}), {onMoveChecker})(DeskLine)",{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":33,"column":32,"nodeType":"70","messageId":"71","endLine":33,"endColumn":42},{"ruleId":"68","severity":1,"message":"72","line":33,"column":44,"nodeType":"70","messageId":"71","endLine":33,"endColumn":54},{"ruleId":"73","severity":1,"message":"74","line":128,"column":41,"nodeType":"75","messageId":"76","endLine":128,"endColumn":43},{"ruleId":"73","severity":1,"message":"74","line":130,"column":43,"nodeType":"75","messageId":"76","endLine":130,"endColumn":45},{"ruleId":"73","severity":1,"message":"74","line":147,"column":41,"nodeType":"75","messageId":"76","endLine":147,"endColumn":43},{"ruleId":"73","severity":1,"message":"74","line":149,"column":43,"nodeType":"75","messageId":"76","endLine":149,"endColumn":45},{"ruleId":"73","severity":1,"message":"74","line":161,"column":33,"nodeType":"75","messageId":"76","endLine":161,"endColumn":35},{"ruleId":"73","severity":1,"message":"74","line":162,"column":22,"nodeType":"75","messageId":"76","endLine":162,"endColumn":24},{"ruleId":"73","severity":1,"message":"74","line":171,"column":33,"nodeType":"75","messageId":"76","endLine":171,"endColumn":35},{"ruleId":"73","severity":1,"message":"74","line":172,"column":22,"nodeType":"75","messageId":"76","endLine":172,"endColumn":24},{"ruleId":"77","severity":1,"message":"78","line":34,"column":79,"nodeType":"79","messageId":"80","endLine":34,"endColumn":81},{"ruleId":"77","severity":1,"message":"78","line":34,"column":101,"nodeType":"79","messageId":"80","endLine":34,"endColumn":103},{"ruleId":"77","severity":1,"message":"78","line":57,"column":81,"nodeType":"79","messageId":"80","endLine":57,"endColumn":83},{"ruleId":"77","severity":1,"message":"78","line":57,"column":103,"nodeType":"79","messageId":"80","endLine":57,"endColumn":105},{"ruleId":"73","severity":1,"message":"74","line":33,"column":32,"nodeType":"75","messageId":"76","endLine":33,"endColumn":34},"no-native-reassign",["81"],"no-negated-in-lhs",["82"],"no-unused-vars","'blackScore' is assigned a value but never used.","Identifier","unusedVar","'whiteScore' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","no-global-assign","no-unsafe-negation"]