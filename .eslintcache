[{"D:\\JavaScript\\react-redux-project\\backgammon\\src\\index.js":"1","D:\\JavaScript\\react-redux-project\\backgammon\\src\\history.js":"2","D:\\JavaScript\\react-redux-project\\backgammon\\src\\redux\\store.js":"3","D:\\JavaScript\\react-redux-project\\backgammon\\src\\App.js":"4","D:\\JavaScript\\react-redux-project\\backgammon\\src\\redux\\reducer.js":"5","D:\\JavaScript\\react-redux-project\\backgammon\\src\\components\\desk\\index.js":"6","D:\\JavaScript\\react-redux-project\\backgammon\\src\\models\\backgammon.js":"7","D:\\JavaScript\\react-redux-project\\backgammon\\src\\utils.js":"8","D:\\JavaScript\\react-redux-project\\backgammon\\src\\components\\desk-aside\\index.js":"9","D:\\JavaScript\\react-redux-project\\backgammon\\src\\components\\desk-line\\index.js":"10","D:\\JavaScript\\react-redux-project\\backgammon\\src\\redux\\middlewares.js":"11"},{"size":492,"mtime":1612615414312,"results":"12","hashOfConfig":"13"},{"size":109,"mtime":1612615414271,"results":"14","hashOfConfig":"13"},{"size":434,"mtime":1614443594691,"results":"15","hashOfConfig":"13"},{"size":255,"mtime":1613147869405,"results":"16","hashOfConfig":"13"},{"size":446,"mtime":1612615414419,"results":"17","hashOfConfig":"13"},{"size":1433,"mtime":1614678538925,"results":"18","hashOfConfig":"13"},{"size":4146,"mtime":1614678537129,"results":"19","hashOfConfig":"13"},{"size":3355,"mtime":1614444983699,"results":"20","hashOfConfig":"13"},{"size":1103,"mtime":1614678538122,"results":"21","hashOfConfig":"13"},{"size":2928,"mtime":1614678537628,"results":"22","hashOfConfig":"13"},{"size":447,"mtime":1614678536546,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1chnrr7",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\JavaScript\\react-redux-project\\backgammon\\src\\index.js",[],["49","50"],"D:\\JavaScript\\react-redux-project\\backgammon\\src\\history.js",[],"D:\\JavaScript\\react-redux-project\\backgammon\\src\\redux\\store.js",["51"],"import { createStore, applyMiddleware } from 'redux'\nimport logger from 'redux-logger'\nimport thunk from 'redux-thunk'\nimport reducer from './reducer'\nimport { routerMiddleware } from 'connected-react-router'\nimport history from '../history'\nimport changeTurnMiddleware from './middlewares'\n\nconst enhancer = applyMiddleware(thunk, routerMiddleware(history), logger)\nconst store = createStore(reducer, enhancer)\n\nexport default store\n","D:\\JavaScript\\react-redux-project\\backgammon\\src\\App.js",[],"D:\\JavaScript\\react-redux-project\\backgammon\\src\\redux\\reducer.js",[],"D:\\JavaScript\\react-redux-project\\backgammon\\src\\components\\desk\\index.js",["52","53","54"],"D:\\JavaScript\\react-redux-project\\backgammon\\src\\models\\backgammon.js",["55","56","57","58","59","60"],"D:\\JavaScript\\react-redux-project\\backgammon\\src\\utils.js",["61","62","63","64","65"],"export const getRandomDices = () => {\r\n  let arr = []\r\n  let copyArr = []\r\n  arr = [Math.round(Math.random() * 5 + 1), Math.round(Math.random() * 5 + 1)]\r\n  if (arr[0] === arr[1]) {\r\n    copyArr = arr[0]\r\n    arr.push(copyArr)\r\n    arr.push(copyArr)\r\n  }\r\n  return arr\r\n}\r\n\r\nexport const isImpossibleTurn = ({deskForWhite, deskForBlack, turn, points}) => {\r\n  // TODO fixes\r\n  let countTurns = 0\r\n  const desk = turn === 'white' ? deskForWhite : deskForBlack\r\n\r\n  desk && desk.map((line, lineId) => {\r\n    line && line.map((checker, checkerId) => {\r\n      // if(checker > 0){\r\n\r\n      // }\r\n      if(turn === 'white') {\r\n        if(line[0] === 1 && points.length === 2) {\r\n          if(desk[lineId + points[0]][0] !== 0 || (desk[lineId + points[1]][0] !== 0)) {\r\n            countTurns++\r\n          }\r\n        }\r\n        if(line[0] === 1 && points.length === 1) {\r\n          if(desk[lineId + points[0]][0] !== 0) {\r\n            countTurns++\r\n          }\r\n        }\r\n      }\r\n    })\r\n  })\r\n\r\n  return countTurns === 0\r\n}\r\n\r\n\r\nconst handleCheckCheckerCarry = (line, setActiveChecker, checkedLineId, points, desk, setActiveLines, turn) => {\r\n  if (line[0] === 1 && turn === 'white') {\r\n    setActiveChecker(checkedLineId)\r\n    let lines = []\r\n    if (points.length === 2) {\r\n      checkForTwoPoints(points, checkedLineId, desk, lines)\r\n      setActiveLines(lines)\r\n    }\r\n    if (points.length === 1) {\r\n      checkForOnePoint(points, checkedLineId, desk, lines)\r\n      setActiveLines(lines)\r\n    }\r\n  } else if(line[0] === 0 && turn === 'black') {\r\n    setActiveChecker(checkedLineId)\r\n    let lines = []\r\n    if (points.length === 2) {\r\n      checkForTwoPoints(points, checkedLineId, desk, lines)\r\n      setActiveLines(lines)\r\n      console.log(lines)\r\n    }\r\n  }\r\n}\r\n\r\nconst getMaxLineId = activeLines => {\r\n  let maxId = 0\r\n  activeLines.map(line => {\r\n    if (line.lineId > maxId) {\r\n      maxId = line.lineId\r\n    }\r\n  })\r\n  return maxId\r\n}\r\n\r\nconst checkForTwoPoints = (points, checkedLineId, desk, lines) => {\r\n  if ((points[0] + checkedLineId) <= 24) {\r\n    if (desk[points[0] + checkedLineId - 1].length === 0 || desk[points[0] + checkedLineId - 1][0] === 1)\r\n      lines.push({point: points[0], lineId: points[0] + checkedLineId})\r\n  } \r\n  if (desk[points[1] + checkedLineId - 1].length === 0 || desk[points[0] + checkedLineId - 1][0] === 1) {\r\n    if (getMaxLineId(lines) <= 24) {\r\n      lines.push({point: points[1], lineId: points[1] + checkedLineId})\r\n    } else {\r\n      lines.push({point: points[1], lineId: 12 - ((points[1] + checkedLineId) - 24)})\r\n    }\r\n  }\r\n  if (desk[points[0] + points[1] + checkedLineId - 1].length === 0 && lines.length !== 0 || desk[points[0] + checkedLineId - 1][0] === 1) {\r\n    if (points[0] + points[1] + checkedLineId <= 24) {\r\n      lines.push({point: points[0] + points[1], lineId: points[0] + points[1] + checkedLineId})\r\n    } else {\r\n      lines.push({point: points[0] + points[1], lineId: 12 - ((points[0] + points[1] + checkedLineId) - 24)})\r\n    }\r\n  }\r\n}\r\n\r\nconst checkForOnePoint = (points, checkedLineId, desk, lines) => {\r\n  if ((points[0] + checkedLineId) <= 24) {\r\n    if (desk[points[0] + checkedLineId - 1].length === 0 || desk[points[0] + checkedLineId - 1][0] === 1)\r\n      lines.push({point: points[0], lineId: points[0] + checkedLineId})\r\n  }\r\n\r\n}\r\n\r\nexport default handleCheckCheckerCarry","D:\\JavaScript\\react-redux-project\\backgammon\\src\\components\\desk-aside\\index.js",[],"D:\\JavaScript\\react-redux-project\\backgammon\\src\\components\\desk-line\\index.js",[],"D:\\JavaScript\\react-redux-project\\backgammon\\src\\redux\\middlewares.js",[],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":7,"column":8,"nodeType":"72","messageId":"73","endLine":7,"endColumn":28},{"ruleId":"70","severity":1,"message":"74","line":35,"column":21,"nodeType":"72","messageId":"73","endLine":35,"endColumn":30},{"ruleId":"70","severity":1,"message":"75","line":35,"column":32,"nodeType":"72","messageId":"73","endLine":35,"endColumn":42},{"ruleId":"70","severity":1,"message":"76","line":35,"column":44,"nodeType":"72","messageId":"73","endLine":35,"endColumn":54},{"ruleId":"77","severity":1,"message":"78","line":132,"column":38,"nodeType":"79","messageId":"80","endLine":132,"endColumn":40},{"ruleId":"77","severity":1,"message":"78","line":134,"column":55,"nodeType":"79","messageId":"80","endLine":134,"endColumn":57},{"ruleId":"77","severity":1,"message":"78","line":148,"column":33,"nodeType":"79","messageId":"80","endLine":148,"endColumn":35},{"ruleId":"77","severity":1,"message":"78","line":149,"column":22,"nodeType":"79","messageId":"80","endLine":149,"endColumn":24},{"ruleId":"77","severity":1,"message":"78","line":158,"column":33,"nodeType":"79","messageId":"80","endLine":158,"endColumn":35},{"ruleId":"77","severity":1,"message":"78","line":159,"column":22,"nodeType":"79","messageId":"80","endLine":159,"endColumn":24},{"ruleId":"77","severity":1,"message":"78","line":18,"column":35,"nodeType":"79","messageId":"80","endLine":18,"endColumn":37},{"ruleId":"77","severity":1,"message":"78","line":19,"column":43,"nodeType":"79","messageId":"80","endLine":19,"endColumn":45},{"ruleId":"77","severity":1,"message":"78","line":67,"column":24,"nodeType":"79","messageId":"80","endLine":67,"endColumn":26},{"ruleId":"81","severity":1,"message":"82","line":87,"column":68,"nodeType":"83","messageId":"84","endLine":87,"endColumn":70},{"ruleId":"81","severity":1,"message":"82","line":87,"column":90,"nodeType":"83","messageId":"84","endLine":87,"endColumn":92},"no-native-reassign",["85"],"no-negated-in-lhs",["86"],"no-unused-vars","'changeTurnMiddleware' is defined but never used.","Identifier","unusedVar","'blackDesk' is assigned a value but never used.","'blackScore' is assigned a value but never used.","'whiteScore' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","no-global-assign","no-unsafe-negation"]