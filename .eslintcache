[{"/Applications/MAMP/htdocs/-backgammon/src/index.js":"1","/Applications/MAMP/htdocs/-backgammon/src/history.js":"2","/Applications/MAMP/htdocs/-backgammon/src/App.js":"3","/Applications/MAMP/htdocs/-backgammon/src/redux/store.js":"4","/Applications/MAMP/htdocs/-backgammon/src/redux/reducer.js":"5","/Applications/MAMP/htdocs/-backgammon/src/components/desk/index.js":"6","/Applications/MAMP/htdocs/-backgammon/src/models/backgammon.js":"7","/Applications/MAMP/htdocs/-backgammon/src/utils.js":"8","/Applications/MAMP/htdocs/-backgammon/src/components/desk-aside/index.js":"9","/Applications/MAMP/htdocs/-backgammon/src/components/desk-line/index.js":"10"},{"size":492,"mtime":1612964180827,"results":"11","hashOfConfig":"12"},{"size":109,"mtime":1612964180827,"results":"13","hashOfConfig":"12"},{"size":242,"mtime":1613135459333,"results":"14","hashOfConfig":"12"},{"size":385,"mtime":1612964180831,"results":"15","hashOfConfig":"12"},{"size":446,"mtime":1612964180830,"results":"16","hashOfConfig":"12"},{"size":1738,"mtime":1614258760924,"results":"17","hashOfConfig":"12"},{"size":4391,"mtime":1614258760925,"results":"18","hashOfConfig":"12"},{"size":262,"mtime":1613556384804,"results":"19","hashOfConfig":"12"},{"size":4032,"mtime":1614258760923,"results":"20","hashOfConfig":"12"},{"size":2854,"mtime":1614258760924,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"3mmutv",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"24"},"/Applications/MAMP/htdocs/-backgammon/src/index.js",[],["46","47"],"/Applications/MAMP/htdocs/-backgammon/src/history.js",[],"/Applications/MAMP/htdocs/-backgammon/src/App.js",[],"/Applications/MAMP/htdocs/-backgammon/src/redux/store.js",[],"/Applications/MAMP/htdocs/-backgammon/src/redux/reducer.js",[],"/Applications/MAMP/htdocs/-backgammon/src/components/desk/index.js",["48","49"],"import {connect} from 'react-redux'\nimport React from 'react'\nimport './style.scss'\nimport DeskAside from '../desk-aside'\n\nimport {\n  whiteDeskSelector,\n  blackDeskSelector,\n  blackScoreSelector,\n  whiteScoreSelector,\n  pointsSelector,\n  turnSelector,\n  initStartGame,\n  onChangeTurn,\n  onRollTheDices,\n} from '../../models/backgammon'\n\nconst deskSeparator = (desk) => {\n  const firstDesk = [],\n    secondDesk = []\n  for (let i = 0; i < desk.length; i++) {\n    if (i < 12) {\n      firstDesk.push(desk[i])\n    } else {\n      secondDesk.push(desk[i])\n    }\n  }\n  return [firstDesk, secondDesk]\n}\n\n\nexport function Desk(props) {\n  const {whiteDesk, blackDesk, blackScore, whiteScore, points, turn} = props\n  return (\n    <div className=\"Desk\">\n      {deskSeparator(whiteDesk).map((aside, asideKey) => {\n        return (\n          <DeskAside\n            asideData={aside}\n            asideKey={asideKey}\n            key={asideKey}\n            turn={turn}\n            points={points}\n            desk={blackDesk}\n          />\n        )\n      })}\n      {deskSeparator(blackDesk).map((aside, asideKey) => {\n        return (\n          <DeskAside\n            asideData={aside}\n            asideKey={asideKey}\n            key={asideKey}\n            turn={turn}\n            points={points}\n            desk={whiteDesk}\n          />\n        )\n      })}\n    </div>\n  )\n}\n\nexport default connect(\n  (state) => ({\n    whiteDesk: whiteDeskSelector(state),\n    blackDesk: blackDeskSelector(state),\n    blackScore: blackScoreSelector(state),\n    whiteScore: whiteScoreSelector(state),\n    points: pointsSelector(state),\n    turn: turnSelector(state),\n  }),\n  {initStartGame, onChangeTurn, onRollTheDices}\n)(Desk)\n","/Applications/MAMP/htdocs/-backgammon/src/models/backgammon.js",[],"/Applications/MAMP/htdocs/-backgammon/src/utils.js",[],"/Applications/MAMP/htdocs/-backgammon/src/components/desk-aside/index.js",["50","51","52","53","54"],"import React, {useState} from 'react'\nimport './style.scss'\nimport DeskLine from '../desk-line'\n\nconst handleCheckCheckerCarry = (line, setActiveChecker, checkedLineId, points, desk, setActiveLines, turn) => {\n  if (line[0] === 1 && turn === 'white') {\n    setActiveChecker(checkedLineId)\n    let lines = []\n    if (points.length === 2) {\n      if ((points[0] + checkedLineId) <= 24) {\n        if (desk[points[0] + checkedLineId - 1].length === 0 || desk[points[0] + checkedLineId - 1][0] === 1)\n          lines.push({point: points[0], lineId: points[0] + checkedLineId})\n      } else {\n\n      }\n      if (desk[points[1] + checkedLineId - 1].length === 0 || desk[points[0] + checkedLineId - 1][0] === 1) {\n        if (getMaxLineId(lines) <= 24) {\n          lines.push({point: points[1], lineId: points[1] + checkedLineId})\n        } else {\n          lines.push({point: points[1], lineId: 12 - ((points[1] + checkedLineId) - 24)})\n        }\n      }\n      if (desk[points[0] + points[1] + checkedLineId - 1].length === 0 && lines.length !== 0 || desk[points[0] + checkedLineId - 1][0] === 1) {\n        if (points[0] + points[1] + checkedLineId <= 24) {\n          lines.push({point: points[0] + points[1], lineId: points[0] + points[1] + checkedLineId})\n        } else {\n          lines.push({point: points[0] + points[1], lineId: 12 - ((points[0] + points[1] + checkedLineId) - 24)})\n        }\n      }\n      setActiveLines(lines)\n    }\n  } else if(line[0] === 0 && turn === 'black') {\n    setActiveChecker(checkedLineId)\n    let lines = []\n    if (points.length === 2) {\n      if (desk[points[0] + checkedLineId - 1].length === 0 || desk[points[0] + checkedLineId - 1][0] === 0) {\n        lines.push(points[0] + checkedLineId)\n      }\n      if (desk[points[1] + checkedLineId - 1].length === 0 || desk[points[0] + checkedLineId - 1][0] === 0) {\n        lines.push(points[1] + checkedLineId)\n      }\n      if (desk[points[0] + points[1] + checkedLineId - 1].length === 0 && lines.length !== 0 || desk[points[0] + checkedLineId - 1][0] === 0) {\n        lines.push(points[0] + points[1] + checkedLineId)\n      }\n      setActiveLines(lines)\n      console.log(lines)\n    }\n  }\n}\n\nconst getMaxLineId = activeLines => {\n  let maxId = 0\n  activeLines.map(line => {\n    if (line.lineId > maxId) {\n      maxId = line.lineId\n    }\n  })\n  return maxId\n}\n\nconst DeskAside = ({asideData, asideKey, turn, points, desk}) => {\n  const [activeChecker, setActiveChecker] = useState(null)\n  const [activeLines, setActiveLines] = useState([])\n\n  return (\n    <div className=\"deskAsideWhite\">\n      {asideData.map((line, key) => {\n        const checkedLineId = ((key + 1) * (asideKey)) + 12\n        return (\n          <DeskLine\n            handleCheckChecker={() => handleCheckCheckerCarry(line, setActiveChecker, checkedLineId, points, desk, setActiveLines, turn)}\n            activeChecker={activeChecker}\n            key={key}\n            DeskKey={key}\n            line={line}\n            checkedLineId={checkedLineId}\n            activeLines={activeLines}\n            setActiveLines={setActiveLines}\n          />\n        )\n      })}\n    </div>\n  )\n}\n\nexport default DeskAside","/Applications/MAMP/htdocs/-backgammon/src/components/desk-line/index.js",["55"],"import React from 'react'\nimport {connect} from 'react-redux'\nimport './style.scss'\nimport classNames from 'classnames'\nimport {\n  blackDeskSelector,\n  pointsSelector,\n  onMoveChecker,\n  turnSelector,\n  whiteDeskSelector,\n} from '../../models/backgammon'\n\n\n\nconst DeskLine = ({\n  activeLines,\n  setActiveLines,\n  handleCheckChecker,\n  activeChecker,\n  checkedLineId,\n  DeskKey,\n  line,\n  onMoveChecker,\n  turn,\n  points,\n  blackDesk,\n  whiteDesk\n}) => {\n  const isActiveLine = activeLines.map(item => item.lineId).includes(checkedLineId)\n  const activePointsLine = activeLines.find(f => f.lineId === checkedLineId)\n  const separator = DeskKey === 6 ? <div className=\"deskSep\"/> : null\n  const lineClasses = classNames({\n    'deskLine': true,\n    'line-active': isActiveLine\n  })\n\n  const handleMoveChecker = () => {\n    const activeDesk = turn === 'black' ? blackDesk : whiteDesk\n    activeDesk.map((line, key) => {\n      if((key + 1) === activeChecker) {\n        line.pop()\n      }\n      if((key + 1) === checkedLineId) {\n        line.push(turn === 'black' ? 0 : 1)\n      }\n    })\n    let empty = []\n    if(turn === 'black') {\n      for(let i = 0; i < activeDesk.length; i++) {\n        if(activeDesk[i][0] === 1) {\n          activeDesk[i] = empty\n        }\n      }\n    }\n    if(turn === 'white') {\n      for(let i = 0; i < activeDesk.length; i++) {\n        if(activeDesk[i][0] === 0) {\n          activeDesk[i] = empty\n        }\n      }\n    }\n    console.log(activeDesk)\n    // TODO: добавить условие, при котором мы сходили на 2, или на 3, то убирать ход на 5\n    setActiveLines(activeLines.filter(f => f.point !== activePointsLine.point && points[0] + points[1] !== activePointsLine.point))\n    onMoveChecker(activeDesk, activePointsLine.point)\n  }\n\n  return (\n    <span>\n      {separator}\n      <div className={lineClasses} onClick={isActiveLine ? handleMoveChecker : handleCheckChecker}>\n        {line.map((checker, checkKey) => {\n          const checkerClasses = classNames({\n            'deskChecker': true,\n            'checker-white': checker === 1,\n            'checker-black': checker === 0,\n            'checker-active': (activeChecker === checkedLineId) && (checkKey === line.length - 1)\n          })\n          return <div\n            key={checkKey}\n            className={checkerClasses}\n          >\n            {checker}\n          </div>\n        })}\n      </div>\n    </span>\n  )\n}\n\nexport default connect((state) => ({\n  whiteDesk: whiteDeskSelector(state),\n  blackDesk: blackDeskSelector(state),\n  turn: turnSelector(state),\n  points: pointsSelector(state),\n}), {onMoveChecker})(DeskLine)",{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":36,"column":32,"nodeType":"62","messageId":"63","endLine":36,"endColumn":42},{"ruleId":"60","severity":1,"message":"64","line":36,"column":44,"nodeType":"62","messageId":"63","endLine":36,"endColumn":54},{"ruleId":"65","severity":1,"message":"66","line":23,"column":72,"nodeType":"67","messageId":"68","endLine":23,"endColumn":74},{"ruleId":"65","severity":1,"message":"66","line":23,"column":94,"nodeType":"67","messageId":"68","endLine":23,"endColumn":96},{"ruleId":"65","severity":1,"message":"66","line":42,"column":72,"nodeType":"67","messageId":"68","endLine":42,"endColumn":74},{"ruleId":"65","severity":1,"message":"66","line":42,"column":94,"nodeType":"67","messageId":"68","endLine":42,"endColumn":96},{"ruleId":"69","severity":1,"message":"70","line":53,"column":24,"nodeType":"71","messageId":"72","endLine":53,"endColumn":26},{"ruleId":"69","severity":1,"message":"70","line":37,"column":32,"nodeType":"71","messageId":"72","endLine":37,"endColumn":34},"no-native-reassign",["73"],"no-negated-in-lhs",["74"],"no-unused-vars","'blackScore' is assigned a value but never used.","Identifier","unusedVar","'whiteScore' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]