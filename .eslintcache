[{"D:\\JavaScript\\react-redux-project\\backgammon\\src\\index.js":"1","D:\\JavaScript\\react-redux-project\\backgammon\\src\\App.js":"2","D:\\JavaScript\\react-redux-project\\backgammon\\src\\history.js":"3","D:\\JavaScript\\react-redux-project\\backgammon\\src\\redux\\store.js":"4","D:\\JavaScript\\react-redux-project\\backgammon\\src\\redux\\reducer.js":"5","D:\\JavaScript\\react-redux-project\\backgammon\\src\\models\\backgammon.js":"6","D:\\JavaScript\\react-redux-project\\backgammon\\src\\utils.js":"7","D:\\JavaScript\\react-redux-project\\backgammon\\src\\components\\desk\\index.js":"8","D:\\JavaScript\\react-redux-project\\backgammon\\src\\components\\desk-aside\\index.js":"9"},{"size":492,"mtime":1612615414312,"results":"10","hashOfConfig":"11"},{"size":255,"mtime":1613147869405,"results":"12","hashOfConfig":"11"},{"size":109,"mtime":1612615414271,"results":"13","hashOfConfig":"11"},{"size":385,"mtime":1612615414445,"results":"14","hashOfConfig":"11"},{"size":446,"mtime":1612615414419,"results":"15","hashOfConfig":"11"},{"size":4108,"mtime":1613416191095,"results":"16","hashOfConfig":"11"},{"size":262,"mtime":1613406429718,"results":"17","hashOfConfig":"11"},{"size":5633,"mtime":1613528055287,"results":"18","hashOfConfig":"11"},{"size":269,"mtime":1613494798416,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1chnrr7",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\JavaScript\\react-redux-project\\backgammon\\src\\index.js",[],["40","41"],"D:\\JavaScript\\react-redux-project\\backgammon\\src\\App.js",[],"D:\\JavaScript\\react-redux-project\\backgammon\\src\\history.js",[],"D:\\JavaScript\\react-redux-project\\backgammon\\src\\redux\\store.js",[],"D:\\JavaScript\\react-redux-project\\backgammon\\src\\redux\\reducer.js",[],"D:\\JavaScript\\react-redux-project\\backgammon\\src\\models\\backgammon.js",["42","43","44","45","46","47","48","49"],"import { createSelector } from 'reselect'\nimport { getRandomDices } from '../utils'\n\n/**\n * Constants\n * */\n\nexport const moduleName = 'gameModel'\n\nexport const GAME_START = `${moduleName}/GAME_START`\nexport const ROLL_THE_DICES = `${moduleName}/ROLL_THE_DICES`\n\nexport const MOVE_CHECKER_REQUEST = `${moduleName}/MOVE_CHECKER_REQUEST`\nexport const MOVE_CHECKER_SUCCESS = `${moduleName}/MOVE_CHECKER_SUCCESS`\nexport const CHANGE_TURN_REQUEST = `${moduleName}/CHANGE_TURN_REQUEST`\nexport const CHANGE_TURN_SUCCESS = `${moduleName}/CHANGE_TURN_SUCCESS`\nexport const GAME_OVER_SUCCESS = `${moduleName}/GAME_OVER_SUCCESS`\n\n/**\n * Reducer\n * */\n\nexport const ReducerRecord = {\n  deskForBlack: [\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [],\n    [],\n    [],\n    [0],\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n  ],\n  deskForWhite: [\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n  ],\n  points: [3, 2],\n  turn: 'white', // or white\n}\n\nexport default function reducer(state = ReducerRecord, action) {\n  const { type, payload } = action\n\n  switch (type) {\n    case GAME_START:\n      return Object.assign({}, ReducerRecord)\n    case ROLL_THE_DICES:\n      return Object.assign(\n        {},\n        {\n          points: payload,\n        }\n      )\n    case MOVE_CHECKER_SUCCESS:\n      const deskData =\n        state.turn === 'black'\n          ? { deskForBlack: payload }\n          : { deskForWhite: payload }\n      return Object.assign({}, deskData)\n    case CHANGE_TURN_SUCCESS:\n      const currentTurn = state.turn === 'black' ? 'white' : 'black'\n      return Object.assign(\n        {},\n        {\n          turn: currentTurn,\n        }\n      )\n    case GAME_OVER_SUCCESS:\n      return Object.assign({}, ReducerRecord)\n    default:\n      return state\n  }\n}\n\n/**\n * Selectors\n * */\n\n//TODO: create selectors\n\nexport const stateSelector = (state) => state[moduleName]\nexport const whiteDeskSelector = createSelector(\n  stateSelector,\n  (state) => {\n    const result = []\n    const whiteDesk = state.deskForWhite\n    const blackDesk = state.deskForBlack\n\n    whiteDesk.map((whiteLine, whiteKey) => {\n      let blackTemp = []\n      blackDesk.map((blackLine, blackKey) => {       \n        if (whiteKey === blackKey) {\n          blackTemp = blackLine\n        }\n      })\n      result.push(whiteLine.concat(blackTemp))\n    })\n    return result\n  } \n)\nexport const blackDeskSelector = createSelector(\n  stateSelector,\n  (state) => {\n    const result = []\n    const whiteDesk = state.deskForWhite\n    const blackDesk = state.deskForBlack\n\n    blackDesk.map((blackLine, blackKey) => {\n      let whiteTemp = []\n      whiteDesk.map((whiteLine, whiteKey) => {       \n        if (blackKey === whiteKey) {\n          whiteTemp = whiteLine\n        }\n      })\n      result.push(blackLine.concat(whiteTemp))\n    })\n    return result\n  } \n)\nexport const blackScoreSelector = createSelector(stateSelector, (state) => {\n  let count = 0\n  state.deskForBlack.map((line) => {\n    line.map((point) => {\n      count = count + point\n    })\n  })\n  return count\n})\n\nexport const whiteScoreSelector = createSelector(stateSelector, (state) => {\n  let count = 0\n  state.deskForWhite.map((line) => {\n    line.map((point) => {\n      count = count + point\n    })\n  })\n  return count\n})\n\nexport const turnSelector = createSelector(stateSelector, (state) => state.turn)\nexport const pointsSelector = createSelector(\n  stateSelector,\n  (state) => state.points\n)\n\n/**\n * Action Creators\n * */\n\nexport const initStartGame = () => (dispatch, getState) => ({\n  type: GAME_START,\n})\n\nexport const handleRollTheDices = () => ({\n  type: ROLL_THE_DICES,\n  payload: getRandomDices(),\n})\n\nexport const handleMoveChecker = (desk) => ({\n  type: MOVE_CHECKER_REQUEST,\n  payload: desk,\n})\n\n\nexport const handleChangeTurn = () => ({\n  type: CHANGE_TURN_REQUEST,\n})\n","D:\\JavaScript\\react-redux-project\\backgammon\\src\\utils.js",[],"D:\\JavaScript\\react-redux-project\\backgammon\\src\\components\\desk\\index.js",["50","51","52","53","54","55"],"D:\\JavaScript\\react-redux-project\\backgammon\\src\\components\\desk-aside\\index.js",["56","57","58","59"],{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":128,"column":41,"nodeType":"66","messageId":"67","endLine":128,"endColumn":43},{"ruleId":"64","severity":1,"message":"65","line":130,"column":43,"nodeType":"66","messageId":"67","endLine":130,"endColumn":45},{"ruleId":"64","severity":1,"message":"65","line":147,"column":41,"nodeType":"66","messageId":"67","endLine":147,"endColumn":43},{"ruleId":"64","severity":1,"message":"65","line":149,"column":43,"nodeType":"66","messageId":"67","endLine":149,"endColumn":45},{"ruleId":"64","severity":1,"message":"65","line":161,"column":33,"nodeType":"66","messageId":"67","endLine":161,"endColumn":35},{"ruleId":"64","severity":1,"message":"65","line":162,"column":22,"nodeType":"66","messageId":"67","endLine":162,"endColumn":24},{"ruleId":"64","severity":1,"message":"65","line":171,"column":33,"nodeType":"66","messageId":"67","endLine":171,"endColumn":35},{"ruleId":"64","severity":1,"message":"65","line":172,"column":22,"nodeType":"66","messageId":"67","endLine":172,"endColumn":24},{"ruleId":"68","severity":1,"message":"69","line":5,"column":8,"nodeType":"70","messageId":"71","endLine":5,"endColumn":17},{"ruleId":"68","severity":1,"message":"72","line":35,"column":32,"nodeType":"70","messageId":"71","endLine":35,"endColumn":42},{"ruleId":"68","severity":1,"message":"73","line":35,"column":44,"nodeType":"70","messageId":"71","endLine":35,"endColumn":54},{"ruleId":"74","severity":1,"message":"75","line":54,"column":71,"nodeType":"76","messageId":"77","endLine":54,"endColumn":73},{"ruleId":"74","severity":1,"message":"75","line":57,"column":71,"nodeType":"76","messageId":"77","endLine":57,"endColumn":73},{"ruleId":"74","severity":1,"message":"75","line":61,"column":83,"nodeType":"76","messageId":"77","endLine":61,"endColumn":85},{"ruleId":"68","severity":1,"message":"78","line":1,"column":9,"nodeType":"70","messageId":"71","endLine":1,"endColumn":16},{"ruleId":"68","severity":1,"message":"79","line":2,"column":8,"nodeType":"70","messageId":"71","endLine":2,"endColumn":13},{"ruleId":"68","severity":1,"message":"80","line":2,"column":16,"nodeType":"70","messageId":"71","endLine":2,"endColumn":24},{"ruleId":"68","severity":1,"message":"81","line":4,"column":8,"nodeType":"70","messageId":"71","endLine":4,"endColumn":18},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-unused-vars","'deskAside' is defined but never used.","Identifier","unusedVar","'blackScore' is assigned a value but never used.","'whiteScore' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'connect' is defined but never used.","'React' is defined but never used.","'useState' is defined but never used.","'classNames' is defined but never used.","no-global-assign","no-unsafe-negation"]